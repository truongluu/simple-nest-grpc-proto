// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: order.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Timestamp } from "./google/protobuf/timestamp";
import { Product } from "./product";
import { User } from "./user";

export enum OrderStatus {
  PENDING = 0,
  PROCESSING = 1,
  SHIPPED = 2,
  DELIVERED = 3,
  CANCELLED = 4,
  UNRECOGNIZED = -1,
}

export interface CreateOrderRequest {
  userId: number;
  items: OrderItem[];
}

export interface OrderItem {
  productId: number;
  quantity: number;
}

export interface GetOrderRequest {
  id: number;
}

export interface UpdateOrderStatusRequest {
  id: number;
  newStatus: OrderStatus;
}

export interface ListOrdersRequest {
  pageSize: number;
  pageNumber: number;
  userId?: number | undefined;
}

export interface Order {
  id: number;
  userId: number;
  user: User | undefined;
  items: OrderItem[];
  products: Product[];
  totalAmount: number;
  status: OrderStatus;
  createdAt: Timestamp | undefined;
  updatedAt: Timestamp | undefined;
}

export interface OrderServiceClient {
  createOrder(request: CreateOrderRequest): Observable<Order>;

  getOrder(request: GetOrderRequest): Observable<Order>;

  updateOrderStatus(request: UpdateOrderStatusRequest): Observable<Order>;

  listOrders(request: ListOrdersRequest): Observable<Order>;
}

export interface OrderServiceController {
  createOrder(request: CreateOrderRequest): Promise<Order> | Observable<Order> | Order;

  getOrder(request: GetOrderRequest): Promise<Order> | Observable<Order> | Order;

  updateOrderStatus(request: UpdateOrderStatusRequest): Promise<Order> | Observable<Order> | Order;

  listOrders(request: ListOrdersRequest): Observable<Order>;
}

export function OrderServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createOrder", "getOrder", "updateOrderStatus", "listOrders"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("OrderService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ORDER_SERVICE_NAME = "OrderService";
